/**
 * SeaDuelServer
 * SeaDuelServer
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from "@angular/core";
import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse,
  HttpEvent
} from "@angular/common/http";
import { CustomHttpUrlEncodingCodec } from "../encoder";

import { Observable } from "rxjs";

import { AuthRequest } from "../model/authRequest";
import { User } from "../model/user";

import { BASE_PATH, COLLECTION_FORMATS } from "../variables";
import { Configuration } from "../configuration";

@Injectable()
export class UsersService {
  protected basePath = "https://localhost/api/v1";
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(
    protected httpClient: HttpClient,
    @Optional()
    @Inject(BASE_PATH)
    basePath: string,
    @Optional() configuration: Configuration
  ) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = "multipart/form-data";
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

  /**
   *
   * Get info about an user
   * @param id The id of the user to retrieve
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public usersByIdIdGet(
    id: string,
    observe?: "body",
    reportProgress?: boolean
  ): Observable<User>;
  public usersByIdIdGet(
    id: string,
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<User>>;
  public usersByIdIdGet(
    id: string,
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<User>>;
  public usersByIdIdGet(
    id: string,
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling usersByIdIdGet."
      );
    }

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys["Authorization"]) {
      headers = headers.set(
        "Authorization",
        this.configuration.apiKeys["Authorization"]
      );
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ["application/json"];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ["application/json"];

    return this.httpClient.get<User>(
      `${this.basePath}/users/byId/${encodeURIComponent(String(id))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   *
   * Update user info
   * @param id The id of the user to update
   * @param body The fields to update, leave password empty to not edit
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public usersByIdIdPut(
    id: string,
    body: User,
    observe?: "body",
    reportProgress?: boolean
  ): Observable<any>;
  public usersByIdIdPut(
    id: string,
    body: User,
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<any>>;
  public usersByIdIdPut(
    id: string,
    body: User,
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<any>>;
  public usersByIdIdPut(
    id: string,
    body: User,
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling usersByIdIdPut."
      );
    }
    if (body === null || body === undefined) {
      throw new Error(
        "Required parameter body was null or undefined when calling usersByIdIdPut."
      );
    }

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys["Authorization"]) {
      headers = headers.set(
        "Authorization",
        this.configuration.apiKeys["Authorization"]
      );
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ["application/json"];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ["application/json"];
    const httpContentTypeSelected:
      | string
      | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set("Content-Type", httpContentTypeSelected);
    }

    return this.httpClient.put<any>(
      `${this.basePath}/users/byId/${encodeURIComponent(String(id))}`,
      body,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   *
   * Create a new user
   * @param body The user to create
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public usersPost(
    body: AuthRequest,
    observe?: "body",
    reportProgress?: boolean
  ): Observable<any>;
  public usersPost(
    body: AuthRequest,
    observe?: "response",
    reportProgress?: boolean
  ): Observable<HttpResponse<any>>;
  public usersPost(
    body: AuthRequest,
    observe?: "events",
    reportProgress?: boolean
  ): Observable<HttpEvent<any>>;
  public usersPost(
    body: AuthRequest,
    observe: any = "body",
    reportProgress: boolean = false
  ): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error(
        "Required parameter body was null or undefined when calling usersPost."
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ["application/json"];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ["application/json"];
    const httpContentTypeSelected:
      | string
      | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set("Content-Type", httpContentTypeSelected);
    }

    return this.httpClient.post<any>(`${this.basePath}/users`, body, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }
}
