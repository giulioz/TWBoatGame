swagger: "2.0"
info:
  version: 1.0.0
  title: SeaDuelServer
  description: SeaDuelServer
basePath: /api/v1
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
    description: |
      For accessing the API a valid JWT token must be passed in all the queries in
      the 'Authorization' header.

      A valid JWT token is generated by the API and retourned as answer of a call
      to the route /login giving a valid user & password.

      The following syntax must be used in the 'Authorization' header :
          Bearer xxxxxx.yyyyyyy.zzzzzz
tags:
  - name: Authentication
  - name: Users
  - name: Messaging
  - name: Games

consumes:
  - application/json
produces:
  - application/json

definitions:
  Login:
    type: object
    title: Login
    properties:
      id:
        type: string
        description: "Username"
      password:
        type: string
        format: "password"
  User:
    type: object
    title: User
    properties:
      id:
        type: string
        description: "Username"
      email:
        type: string
        format: "email"
      password:
        type: string
        format: "password"
      role:
        type: string
        enum:
          - user
          - administrator
      registrationDate:
        type: string
        format: "date-time"
      state:
        type: string
        enum:
          - offline
          - online
          - playing
      wonGames:
        type: number
      lostGames:
        type: number
        description: "Lost or withdrawn"
      position:
        type: number
        description: "Position in ranking"
      lastActivity:
        type: string
        format: "date-time"
        description: "Last http request made by user, for online check"

  GameBoard:
    type: object
    title: GameBoard
    properties:
      width:
        type: number
      height:
        type: number
      boardData:
        type: array
        items:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                enum:
                  - Empty
                  - Hidden
                  - Destroyer
                  - Submarine
                  - Battleship
                  - AircraftCarrier
              checked:
                type: boolean

  Game:
    type: object
    title: Game
    properties:
      state:
        type: string
        enum:
          - WaitingForResponse
          - Rejected
          - BoatsPositioning
          - PlayerTurn
          - OpponentTurn
          - Ended
      winnerId:
        type: string
        description: "UserId of the winner, -1 if still playing"
      playerBoard:
        $ref: "#/definitions/GameBoard"
      opponentBoard:
        $ref: "#/definitions/GameBoard"

  Message:
    type: object
    title: Message
    properties:
      content:
        type: string
      time:
        type: string
        format: "date-time"

  Event:
    type: object
    title: Event
    properties:
      type:
        type: string
        enum:
          - IncomingMessage
          - IncomingGameRequest
          - GameStateChanged
          - GameBoardChanged
      data:
        type: object

paths:
  /auth/login:
    post:
      tags:
        - Authentication
      parameters:
        - name: body
          in: body
          required: true
          description: "Login credentials"
          schema:
            $ref: "#/definitions/Login"
      description: "Gets a token from username and password"
      responses:
        200:
          description: "Logged in"
          $ref: "#/securityDefinitions/Bearer"
        403:
          description: "Invalid credentials"
  /auth/checkToken:
    post:
      tags:
        - Authentication
      parameters:
        - name: body
          in: body
          required: true
          description: "Auth token"
          schema:
            type: object
            properties:
              token:
                type: string
      description: "Checks a token validity"
      responses:
        200:
          description: "Token is valid"
        403:
          description: "Invalid credentials"

  /users:
    post:
      tags:
        - Users
      parameters:
        - name: body
          in: body
          required: true
          description: "The user to create"
          schema:
            type: object
            properties:
              id:
                type: string
                description: "Username"
              email:
                type: string
                format: "email"
              password:
                type: string
                format: "password"
      description: "Create a new user"
      responses:
        201:
          description: "User created successfully"
        400:
          description: "Invalid user format or request"
        409:
          description: "User already exists"
        429:
          description: "Too many user creation requests"

  /users/byId/{id}:
    get:
      tags:
        - Users
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          required: true
          description: "The id of the user to retrieve"
          type: string
      description: "Get info about an user"
      responses:
        200:
          description: "Return the user with the specified id"
          $ref: "#/definitions/User"
        404:
          description: "User id not found"
        403:
          description: "Access Denied"
    put:
      tags:
        - Users
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          required: true
          description: "The id of the user to update"
          type: string
        - name: body
          required: true
          description: "The fields to update, leave password empty to not edit"
          schema:
            $ref: "#/definitions/User"
      description: "Update user info"
      responses:
        200:
          description: "User updated successfully"
        400:
          description: "Invalid user format or request"
        404:
          description: "User id not found"

  /users/byId/{id}/messages:
    get:
      tags:
        - Messaging
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          required: true
          description: "The user id of the sender"
          type: string
      description: "Get the messages coming from an user"
      responses:
        200:
          description: "Return the messages"
          type: array
          items:
            $ref: "#/definitions/Message"
        404:
          description: "User id not found"
        403:
          description: "Access Denied"
    post:
      tags:
        - Messaging
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          required: true
          description: "The user id of the recipient"
          type: string
        - name: body
          in: body
          required: true
          description: "The body of the message to send"
          type: string
      description: "Sends a message to the user"
      responses:
        200:
          description: "Message sent successfully, returns the message"
          $ref: "#/definitions/Message"
        404:
          description: "Invalid user id"

  /users/byId/{id}/game:
    get:
      tags:
        - Games
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          required: true
          description: "The user id of the opponent"
          type: string
      description: "Get the game coming from an user"
      responses:
        200:
          description: "Return the game"
          $ref: "#/definitions/Game"
        404:
          description: "User id not found"
        403:
          description: "Access Denied"
    post:
      tags:
        - Games
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          required: true
          description: "The user id of the opponent"
          type: string
      description: "Send a new game request to an user"
      responses:
        200:
          description: "Game request sent successfully, returns the game"
          $ref: "#/definitions/Game"
        404:
          description: "User id not found"
        403:
          description: "Access Denied"
    put:
      tags:
        - Games
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          required: true
          description: "The user id of the opponent"
          type: string
        - name: body
          in: body
          required: true
          description: "The game data to update"
          schema:
            $ref: "#/definitions/Game"
      description: "Update the game state"
      responses:
        200:
          description: "Game updated successfully, returns updated the game"
          $ref: "#/definitions/Game"
        400:
          description: "Invalid game update"
        404:
          description: "User id not found"
        403:
          description: "Access Denied"
