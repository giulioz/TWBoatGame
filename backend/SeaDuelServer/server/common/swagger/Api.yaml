swagger: "2.0"
info:
  version: 1.0.0
  title: SeaDuelServer
  description: SeaDuelServer
basePath: /api/v1
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
    description: |
      For accessing the API a valid JWT token must be passed in all the queries in
      the 'Authorization' header.

      A valid JWT token is generated by the API and retourned as answer of a call
      to the route /login giving a valid user & password.

      The following syntax must be used in the 'Authorization' header :
          Bearer xxxxxx.yyyyyyy.zzzzzz
tags:
  - name: Authentication
  - name: Users
  - name: Messaging
  - name: Games

consumes:
  - application/json
produces:
  - application/json

definitions:
  Login:
    type: object
    title: Login
    properties:
      id:
        type: string
        description: "Username"
      password:
        type: string
        format: "password"
  User:
    type: object
    title: User
    properties:
      id:
        type: string
        description: "Username"
      email:
        type: string
        format: "email"
      password:
        type: string
        format: "password"
      role:
        type: string
        enum:
          - user
          - administrator
      registrationDate:
        type: string
        format: "date-time"
      state:
        type: string
        enum:
          - offline
          - online
      wonGames:
        type: number
      lostGames:
        type: number
        description: "Lost or withdrawn"
      position:
        type: number
        description: "Position in ranking"
      lastActivity:
        type: string
        format: "date-time"
        description: "Last http request made by user, for online check"
      playing:
        type: boolean

  Game:
    type: object
    title: Game
    properties:
      playerId:
        type: string
      opponentId:
        type: string
      state:
        type: string
        enum:
          - WaitingForResponse
          - HasToRespond
          - BoatsPositioning
          - PlayerTurn
          - OpponentTurn
          - Ended
      winnerId:
        type: string
        description: "UserId of the winner, -1 if still playing"
      playerBoard:
        type: object
        title: PlayerBoard
        properties:
          width:
            type: number
          height:
            type: number
          boardData:
            type: array
            items:
              type: object
              properties:
                type:
                  type: string
                  enum:
                    - Empty
                    - Destroyer
                    - Submarine
                    - Battleship
                    - AircraftCarrier
                checked:
                  type: boolean
      opponentBoard:
        type: object
        title: OpponentBoard
        properties:
          width:
            type: number
          height:
            type: number
          boardData:
            type: array
            items:
              type: object
              properties:
                type:
                  type: string
                  enum:
                    - Unknown
                    - Hit
                    - Miss
                    - Boat
      playerReady:
        type: boolean
        description: "If the player has positioned his boats"
      opponentReady:
        type: boolean
        description: "If the opponent has positioned his boats"
      startTime:
        type: string
        format: "date-time"
        description: "Time when the game first started"
      availableBoats:
        type: array
        items:
          type: object
          properties:
            type:
              type: string
              enum:
                - Destroyer
                - Submarine
                - Battleship
                - AircraftCarrier
            amount:
              type: number

  Message:
    type: object
    title: Message
    properties:
      content:
        type: string
      time:
        type: string
        format: "date-time"
      senderId:
        type: string
      recipientId:
        type: string

paths:
  /auth/login:
    post:
      tags:
        - Authentication
      parameters:
        - name: body
          in: body
          required: true
          description: "Login credentials"
          schema:
            $ref: "#/definitions/Login"
      description: "Gets a token from username and password"
      responses:
        200:
          description: "Logged in"
          schema:
            type: string
        403:
          description: "Invalid credentials"
  /auth/checkToken:
    post:
      tags:
        - Authentication
      parameters:
        - name: body
          in: body
          required: true
          description: "Auth token"
          schema:
            type: object
            title: AuthObject
            properties:
              token:
                type: string
      description: "Checks a token validity"
      responses:
        200:
          description: "Token is valid"
        403:
          description: "Invalid credentials"

  /users:
    get:
      tags:
        - Users
      security:
        - Bearer: []
      description: "Get the list of all the users"
      responses:
        200:
          description: "Return all the users"
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
        403:
          description: "Access Denied"
    post:
      tags:
        - Users
      parameters:
        - name: body
          in: body
          required: true
          description: "The user to create"
          schema:
            type: object
            title: NewUser
            properties:
              id:
                type: string
                description: "Username"
              email:
                type: string
                format: "email"
              password:
                type: string
                format: "password"
      description: "Create a new user"
      responses:
        201:
          description: "User created successfully"
        400:
          description: "Invalid user format or request"
        409:
          description: "User already exists"
        429:
          description: "Too many user creation requests"

  /users/findId/{id}:
    get:
      tags:
        - Users
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          required: true
          description: "The start of the user id to find"
          type: string
      description: "Find user by the start of user id"
      responses:
        200:
          description: "Return the users"
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
        403:
          description: "Access Denied"

  /users/byId/{id}:
    get:
      tags:
        - Users
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          required: true
          description: "The id of the user to retrieve"
          type: string
      description: "Get info about an user"
      responses:
        200:
          description: "Return the user with the specified id"
          schema:
            $ref: "#/definitions/User"
        404:
          description: "User id not found"
        403:
          description: "Access Denied"
    delete:
      tags:
        - Users
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          required: true
          description: "The id of the user to delete"
          type: string
      description: "Delete an user"
      responses:
        200:
          description: "User deleted"
        404:
          description: "User id not found"
        403:
          description: "Access Denied"
    put:
      tags:
        - Users
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          required: true
          description: "The id of the user to update"
          type: string
        - name: body
          in: body
          required: true
          description: "The fields to update, leave password empty to not edit"
          schema:
            $ref: "#/definitions/User"
      description: "Update user info"
      responses:
        200:
          description: "User updated successfully"
        400:
          description: "Invalid user format or request"
        404:
          description: "User id not found"

  /users/contacts:
    get:
      tags:
        - Users
      security:
        - Bearer: []
      description: "Get the users in contact with the logged in user"
      responses:
        200:
          description: "Return the users"
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
        403:
          description: "Access Denied"

  /users/waiting:
    get:
      tags:
        - Users
      security:
        - Bearer: []
      description: "Get random users waiting to play"
      responses:
        200:
          description: "Return the users"
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
        403:
          description: "Access Denied"

  /users/top:
    get:
      tags:
        - Users
      security:
        - Bearer: []
      description: "Get the top 10 users"
      responses:
        200:
          description: "Return the users"
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
        403:
          description: "Access Denied"

  /users/byId/{id}/messages:
    get:
      tags:
        - Messaging
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          required: true
          description: "The user id of the sender"
          type: string
      description: "Get the messages coming from an user"
      responses:
        200:
          description: "Return the messages"
          schema:
            type: array
            items:
              $ref: "#/definitions/Message"
        404:
          description: "User id not found"
        403:
          description: "Access Denied"
    post:
      tags:
        - Messaging
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          required: true
          description: "The user id of the recipient"
          type: string
        - name: body
          in: body
          required: true
          description: "The body of the message to send"
          schema:
            type: object
            title: MessageObject
            properties:
              content:
                type: string
      description: "Sends a message to the user"
      responses:
        200:
          description: "Message sent successfully, returns the message"
          schema:
            $ref: "#/definitions/Message"
        404:
          description: "Invalid user id"

  /users/byId/{id}/game:
    get:
      tags:
        - Games
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          required: true
          description: "The user id of the opponent"
          type: string
      description: "Get the game coming from an user"
      responses:
        200:
          description: "Return the game"
          schema:
            $ref: "#/definitions/Game"
        404:
          description: "User id not found"
        403:
          description: "Access Denied"
    post:
      tags:
        - Games
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          required: true
          description: "The user id of the opponent"
          type: string
      description: "Send a new game request to an user"
      responses:
        200:
          description: "Game request sent successfully, returns the game"
          schema:
            $ref: "#/definitions/Game"
        409:
          description: "Game already started"
        404:
          description: "User id not found"
        403:
          description: "Access Denied"
    put:
      tags:
        - Games
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          required: true
          description: "The user id of the opponent"
          type: string
      description: "Accept a game request"
      responses:
        200:
          description: "Game accepted"
        404:
          description: "Game not found"
        403:
          description: "Access Denied"
    delete:
      tags:
        - Games
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          required: true
          description: "The user id of the opponent"
          type: string
      description: "Resign from a game"
      responses:
        200:
          description: "Resigned succesfully"
        404:
          description: "User id not found"
        403:
          description: "Access Denied"

  /users/byId/{id}/game/boats:
    post:
      tags:
        - Games
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          required: true
          description: "The user id of the opponent"
          type: string
        - name: body
          in: body
          required: true
          description: "The boat to add"
          schema:
            type: object
            title: Boat
            properties:
              x:
                type: number
              y:
                type: number
              direction:
                type: string
                enum:
                  - Vertical
                  - Horizontal
              type:
                type: string
                enum:
                  - Destroyer
                  - Submarine
                  - Battleship
                  - AircraftCarrier
      description: "Adds a new boat during initial positioning"
      responses:
        200:
          description: "Boat added successfully"
        400:
          description: "Invalid position or boat type"
        404:
          description: "User id not found"
        403:
          description: "Access Denied"

  /users/byId/{id}/game/moves:
    post:
      tags:
        - Games
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          required: true
          description: "The user id of the opponent"
          type: string
        - name: body
          in: body
          required: true
          description: "The boat to add"
          schema:
            type: object
            title: Move
            properties:
              x:
                type: number
              y:
                type: number
      description: "Fires a shot into the opponent board"
      responses:
        200:
          description: "Move done successfully"
        400:
          description: "Invalid move"
        404:
          description: "User id not found"
        403:
          description: "Access Denied"
